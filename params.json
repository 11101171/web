{"name":"Web","tagline":"The easiest way to create web applications with Go","body":"# web.go\r\n\r\nweb.go is the simplest way to write web applications in the Go programming language. It's ideal for writing simple, performant backend web services. \r\n\r\n## Overview\r\n\r\nweb.go should be familiar to people who've developed websites with higher-level web frameworks like sinatra or web.py. It is designed to be a lightweight web framework that doesn't impose any scaffolding on the user. Some features include:\r\n\r\n* Routing to url handlers based on regular expressions\r\n* Secure cookies\r\n* Support for fastcgi and scgi\r\n* Web applications are compiled to native code. This means very fast execution and page render speed\r\n* Efficiently serving static files\r\n\r\n## Installation\r\n\r\nMake sure you have the a working Go environment. See the [install instructions](http://golang.org/doc/install.html). web.go targets the Go `release` branch. If you use the `weekly` branch you may have difficulty compiling web.go. There's an alternative web.go branch, `weekly`, that attempts to keep up with the weekly branch.\r\n\r\nTo install web.go, simply run:\r\n\r\n    go get github.com/hoisie/web\r\n\r\nTo compile it from source:\r\n\r\n    git clone git://github.com/hoisie/web.git\r\n    cd web && go build\r\n\r\n## Example\r\n```go\r\npackage main\r\n    \r\nimport (\r\n    \"github.com/hoisie/web\"\r\n)\r\n    \r\nfunc hello(val string) string { return \"hello \" + val } \r\n    \r\nfunc main() {\r\n    web.Get(\"/(.*)\", hello)\r\n    web.Run(\"0.0.0.0:9999\")\r\n}\r\n```\r\n\r\nTo run the application, put the code in a file called hello.go and run:\r\n\r\n    go run hello.go\r\n    \r\nYou can point your browser to http://localhost:9999/world . \r\n\r\n### Getting parameters\r\n\r\nRoute handlers may contain a pointer to web.Context as their first parameter. This variable serves many purposes -- it contains information about the request, and it provides methods to control the http connection. For instance, to iterate over the web parameters, either from the URL of a GET request, or the form data of a POST request, you can access `ctx.Params`, which is a `map[string]string`:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n    \"github.com/hoisie/web\"\r\n)\r\n    \r\nfunc hello(ctx *web.Context, val string) { \r\n    for k,v := range ctx.Params {\r\n\t\tprintln(k, v)\r\n\t}\r\n}   \r\n    \r\nfunc main() {\r\n    web.Get(\"/(.*)\", hello)\r\n    web.Run(\"0.0.0.0:9999\")\r\n}\r\n```\r\n\r\nIn this example, if you visit `http://localhost:9999/?a=1&b=2`, you'll see the following printed out in the terminal:\r\n\r\n    a 1\r\n    b 2\r\n\r\n## Documentation\r\n\r\nIf you use web.go, I'd greatly appreciate a quick message about what you're building with it. This will help me get a sense of usage patterns, and helps me focus development efforts on features that people will actually use. \r\n\r\n## About\r\n\r\nweb.go was written by [Michael Hoisie](http://hoisie.com). \r\n\r\nFollow me on [Twitter](http://www.twitter.com/hoisie)!\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}